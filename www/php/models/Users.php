<?php
/*
 Users model class

 Part of PHP osa framework  www.osalabs.com/osafw/php
 (c) 2009-2024 Oleg Savchuk www.osalabs.com
*/

class Users extends FwModel {
    public const ACL_SITE_ADMIN = 100;
    public const ACL_ADMIN      = 90;
    public const ACL_MANAGER    = 80;
    public const ACL_EMPLOYEE   = 50;
    public const ACL_USER       = 1; //min access level for users
    public const ACL_VISITOR    = 0; //non-logged visitor

    public static $PERM_COOKIE_NAME = 'perm';
    public static $PERM_COOKIE_DAYS = 356;
    public static $order_by = 'fname, lname';

    public function __construct() {
        parent::__construct();

        $this->table_name = 'users';
    }

    public function oneByEmail(string $email): array {
        return $this->db->row($this->getTable(), ['email' => $email]);
    }

    public function iname(string|int $id): string {
        $result = '';
        $item   = $this->one($id);
        if ($item) {
            $result = $item['fname'] . ' ' . $item['lname'];
        }
        return $result;
    }

    #return standard list of id,iname where status=0 order by iname
    public function ilist($min_acl = null): array {
        $where = '';
        if (!is_null($min_acl)) {
            $where = ' and access_level>=' . dbqi($min_acl);

        }

        $sql = "SELECT *, (fname+' '+lname) as iname FROM $this->table_name WHERE status=0 $where ORDER BY fname,lname";
        return $this->db->arrp($sql);
    }

    public function addOrUpdate($login, $pwd, $item) {
        $result      = 0;
        $itemold     = $this->oneByEmail($login);
        $item['pwd'] = SiteUtils::clean_encrypt($pwd);
        if ($itemold) {
            $this->update($itemold['id'], $item);
            $result = $itemold['id'];
        } else {
            $result = $this->add($item);
        }
        return $result;
    }

    public function add($item): int {
        if (!array_key_exists('pwd', $item)) {
            $item['pwd'] = Utils::getRandStr(8); #generate password
        }
        $item['pwd'] = $this->hashPwd($item['pwd']);
        $id          = parent::add($item);
        return $id;
    }

    public function update(int $id, array $item): bool {
        if (array_key_exists('pwd', $item)) {
            $item['pwd'] = $this->hashPwd($item['pwd']);
        }
        return parent::update($id, $item);
    }

    public function isExists($uniq_key, $not_id = null): bool {
        return $this->isExistsByField($uniq_key, 'email', $not_id);
    }

    /**
     * generate password hash from plain password
     * @param string $plain_pwd plain pwd
     * @return string            hash
     */
    public function hashPwd($plain_pwd) {
        return password_hash($plain_pwd, PASSWORD_DEFAULT);
    }

    /**
     * return true if plain password has the same hash as provided
     * @param string $plain_pwd plain pwd
     * @param string $pwd_hash password hash previously generated by hashPwd
     * @return bool            true or false
     */
    public function checkPwd($plain_pwd, $pwd_hash) {
        return password_verify($plain_pwd, $pwd_hash);
    }

    public function doLogin($id) {
        $is_just_registered = intval($_SESSION['is_just_registered'] ?? 0);

        @session_destroy();
        @session_start();
        $_SESSION['XSS'] = Utils::getRandStr(16); #setup XSS code

        #fill up session data
        $this->reloadSession($id);
        $_SESSION['just_logged']        = 1;
        $_SESSION['is_just_registered'] = $is_just_registered;
        session_write_close();

        FwEvents::i()->log('login', $id);

        //set permanent login if requested
        //if ($_REQUEST['is_remember']) createPermCookie($id);
        $this->createPermCookie($id); #in this project no need is_remember

        $this->updateAfterLogin($id);
    }

    public function reloadSession($id = 0) {
        if (!$id) {
            $id = $this->fw->userId();
        }

        $user = $this->one($id);

        $_SESSION['user_id']      = $id;
        $_SESSION['login']        = $user['email'];
        $fname                    = trim($user['fname']);
        $lname                    = trim($user['lname']);
        $_SESSION['user_name']    = $fname . ($fname ? ' ' : '') . $lname; #will be empty if no user name set
        $_SESSION['access_level'] = $user['access_level'];
    }

    private function updateAfterLogin($id) {
        $hU = $this->one($id);
        #TODO add_notify_log($GLOBAL['NOTIFY_LOG_LOGIN'], $id, 0, $hU);

        #update login vars
        $ip = getenv("REMOTE_ADDR");

        /*TODO
        $vars=array(
        'users_id'     => $id,
        'login_ip' => $ip,
        'add_time' => DB::NOW,
        );
        $this->db->insert('users_log', $vars);
         */

        $host = gethostbyaddr($ip);

        $vars = array(
            'login_time' => DB::NOW(),
            'login_ip'   => $ip,
            'login_host' => $host,
        );
        $this->db->update($this->table_name, $vars, $id);
    }

    public function createPermCookie($id) {
        $root_domain0 = $this->fw->config->ROOT_DOMAIN0;

        $cookie_id = substr(Utils::getRandStr(16) . time(), 0, 32);

        $vars = array(
            'cookie_id' => $cookie_id,
            'users_id'  => $id,
        );
        $this->db->insert('user_cookie', $vars, array('replace' => 1));

        setcookie(self::$PERM_COOKIE_NAME, $cookie_id, time() + 60 * 60 * 24 * self::$PERM_COOKIE_DAYS, "/", (preg_match('/\./', $root_domain0)) ? '.' . $root_domain0 : '');
        #rwe("[$root_domain0] ".self::$PERM_COOKIE_NAME.", $cookie_id, ".(time()+60*60*24*self::$PERM_COOKIE_DAYS));

        return $cookie_id;
    }

    # check for permanent login cookie and if it's present - doLogin
    public function checkPermanentLogin() {
        $root_domain0 = $this->fw->config->ROOT_DOMAIN0;

        $result = false;

        $cookie_id = @$_COOKIE[self::$PERM_COOKIE_NAME];
        #rw("cookies:");
        #print_r($_COOKIE);
        #exit;

        if ($cookie_id) {
            $u_id = $this->db->valuep("SELECT users_id
                  FROM users_cookie
                 WHERE cookie_id=@cookie_id
                   and add_time>=FROM_DAYS(TO_DAYS(now())-@days)
            ", [
                'cookie_id' => $cookie_id,
                'days'      => self::$PERM_COOKIE_DAYS,
            ]);

            if ($u_id > 0) {
                $result = true;
                #logger("PERMANENT LOGIN");
                $this->doLogin($u_id);
            } else {
                #cookie is not found in DB - clean it (so it will not put load on DB during next pages)
                setcookie(self::$PERM_COOKIE_NAME, FALSE, -1, "/", (preg_match('/\./', $root_domain0)) ? '.' . $root_domain0 : '');
            }
        }
        return $result;
    }

    public function removePermCookie() {
        $cookie_id = $_COOKIE[self::$PERM_COOKIE_NAME];

        setcookie(self::$PERM_COOKIE_NAME, FALSE, -1, "/");

        #cleanup in DB (user's cookie and ALL old cookies)
        $this->db->query("DELETE FROM user_cookie
            WHERE cookie_id=" . $this->db->quote($cookie_id) . "
               or add_time<FROM_DAYS(TO_DAYS(now())-" . self::$PERM_COOKIE_DAYS . ")
        ");

    }

    #check access for "exact" level
    public function isAccessExact($acl) {
        $req_level = intval($acl);
        return $this->fw->userAccessLevel() == $req_level;
    }

    public function checkAccessExact($acl, $is_die = true) {
        $result = $this->isAccessExact($acl);
        if (!$result && $is_die) {
            throw new AuthException("Access Denied");
        }
        return $result;
    }

    #check access for "at least" level
    public function isAccessLevel(int $req_level): bool {
        return $this->fw->userAccessLevel() >= $req_level;
    }

    public function checkAccessLevel(int $req_level, bool $is_die = true): bool {
        $result = $this->isAccessLevel($req_level);
        if (!$result && $is_die) {
            throw new AuthException("Access Denied");
        }
        return $result;
    }

    /**
     * return sql for limiting access according to current user ACL
     * @param string $alias optional, add_users_id field alias with dot. Example: 'c.'. If not provided - no alias used
     * @param string $field optional, add_users_id field name
     * @return string        sql query string like " and add_users_id=".$this->fw->userId()
     */
    public function sql_acl($alias = '', $field = '') {
        $result = '';
        if (self::isAccessLevel(self::ACL_SITE_ADMIN)) {
            //if we are admin user - allow access to all records
        } else {
            //if we are normal user - allows access only records we created
            if (!$field) {
                $field = 'add_users_id';
            }

            $result = ' and ' . $alias . $field . '=' . dbqi($this->fw->userId()) . ' ';
        }
        return $result;
    }

}
